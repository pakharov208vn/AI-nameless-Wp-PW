generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
   binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique

  name   String
  avatar String

  sessions Session[]
  exams    Exams[]
  studentAnswers StudentAnswers[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @map("user_id")

  @@index([userId])
  @@map("sessions")
}


model Exams {
  id      String @id @default(cuid())
  title   String

  timer   Int

  questions Questions[]
  studentAnswers StudentAnswers[]

  by   User   @relation(fields: [byUserId], references: [id])
  byUserId String @map("by_user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("exams")
}

model Questions {
  id      String @id @default(cuid())
  text    String
  barem   String

  exam   Exams   @relation(references: [id], fields: [examId], onDelete: Cascade)
  examId String @map("exam_id")

  @@map("questions")
}

model StudentAnswers {
  id      String @id @default(cuid())
  answer  String
  score   Int

  studentName String? @map("student_name")
  explanation String? @map("explanation")

  student   User   @relation(references: [id], fields: [studentId], onDelete: Cascade)
  studentId String @map("student_id")

  exam   Exams   @relation(references: [id], fields: [examId], onDelete: Cascade)
  examId String @map("exam_id")

  @@map("student_answers")
}
